/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FlootClaimInterface extends ethers.utils.Interface {
  functions: {
    "FAMILIAR_ADDRESS()": FunctionFragment;
    "FLOOT_ADDRESS()": FunctionFragment;
    "FLOOT_PER_FAMILIAR()": FunctionFragment;
    "UNLOCK_TIME()": FunctionFragment;
    "allowedV1(uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimed(uint256)": FunctionFragment;
    "disableV1Claim(uint256[])": FunctionFragment;
    "enableV1Claim(uint256[])": FunctionFragment;
    "isAllowed(uint256)": FunctionFragment;
    "isClaimable(uint256)": FunctionFragment;
    "multiClaim(uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFloot()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FAMILIAR_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FLOOT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FLOOT_PER_FAMILIAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNLOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedV1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableV1Claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enableV1Claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiClaim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFloot",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FAMILIAR_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FLOOT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FLOOT_PER_FAMILIAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNLOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowedV1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableV1Claim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableV1Claim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFloot",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class FlootClaim extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FlootClaimInterface;

  functions: {
    FAMILIAR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "FAMILIAR_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;

    FLOOT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "FLOOT_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;

    FLOOT_PER_FAMILIAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FLOOT_PER_FAMILIAR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNLOCK_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    "UNLOCK_TIME()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowedV1(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "allowedV1(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claim(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claim(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    "claimed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    disableV1Claim(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "disableV1Claim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableV1Claim(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "enableV1Claim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAllowed(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    "isAllowed(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { allowed: boolean }>;

    isClaimable(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { claimable: boolean }>;

    "isClaimable(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { claimable: boolean }>;

    multiClaim(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "multiClaim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFloot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFloot()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FAMILIAR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "FAMILIAR_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  FLOOT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "FLOOT_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  FLOOT_PER_FAMILIAR(overrides?: CallOverrides): Promise<BigNumber>;

  "FLOOT_PER_FAMILIAR()"(overrides?: CallOverrides): Promise<BigNumber>;

  UNLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  "UNLOCK_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowedV1(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "allowedV1(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claim(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claim(uint256)"(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "claimed(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  disableV1Claim(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "disableV1Claim(uint256[])"(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableV1Claim(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "enableV1Claim(uint256[])"(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAllowed(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isAllowed(uint256)"(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isClaimable(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "isClaimable(uint256)"(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multiClaim(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "multiClaim(uint256[])"(
    _ids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFloot(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFloot()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FAMILIAR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "FAMILIAR_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    FLOOT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "FLOOT_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    FLOOT_PER_FAMILIAR(overrides?: CallOverrides): Promise<BigNumber>;

    "FLOOT_PER_FAMILIAR()"(overrides?: CallOverrides): Promise<BigNumber>;

    UNLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "UNLOCK_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowedV1(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "allowedV1(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claim(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claim(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "claimed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disableV1Claim(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "disableV1Claim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    enableV1Claim(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "enableV1Claim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isAllowed(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isAllowed(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isClaimable(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "isClaimable(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiClaim(_ids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    "multiClaim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFloot(overrides?: CallOverrides): Promise<void>;

    "withdrawFloot()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    FAMILIAR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "FAMILIAR_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    FLOOT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "FLOOT_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    FLOOT_PER_FAMILIAR(overrides?: CallOverrides): Promise<BigNumber>;

    "FLOOT_PER_FAMILIAR()"(overrides?: CallOverrides): Promise<BigNumber>;

    UNLOCK_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    "UNLOCK_TIME()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowedV1(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowedV1(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claim(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "claimed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableV1Claim(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "disableV1Claim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableV1Claim(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "enableV1Claim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAllowed(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "isAllowed(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimable(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isClaimable(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiClaim(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "multiClaim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFloot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFloot()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FAMILIAR_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FAMILIAR_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FLOOT_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FLOOT_ADDRESS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FLOOT_PER_FAMILIAR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FLOOT_PER_FAMILIAR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNLOCK_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UNLOCK_TIME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedV1(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowedV1(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claim(uint256)"(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableV1Claim(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "disableV1Claim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableV1Claim(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "enableV1Claim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAllowed(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAllowed(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimable(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isClaimable(uint256)"(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiClaim(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "multiClaim(uint256[])"(
      _ids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFloot(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFloot()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
